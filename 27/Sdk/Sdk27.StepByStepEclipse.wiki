= openMDX SDK 2.7 for ''Eclipse'' Step-by-Step Guide =

This guide explains how to setup ''openMDX SDK 2.7'' for ''Eclipse''.

'''IMPORTANT:''' This guide assumes that the ''openMDX SDK 2.7'' projects are successfully setup as described in the [wiki:Sdk27.StepByStepAnt openMDX SDK 2.7 for Ant Step-by-Step] and [wiki:Sdk27.StepByStepTomcat openMDX SDK 2.7 on Tomcat + OpenEJB Step-by-Step] guides.

Make sure that you have installed ''Eclipse 3.4'' or higher (download it from [http://www.eclipse.org/downloads/ here]).

After installation launch ''Eclipse''. Create a new workspace by selecting ''File > Switch Workspace > Other''. Enter the directory name of the new workspace. In this guide we will use the directory ''/tmp/SF/eclipse\openmdx-2.7.0'' as shown below:

[[Image(Sdk27.StepByStepEclipse.pic010.png)]]

''Eclipse'' will be launched with a new empty workspace.

[[Image(Sdk27.StepByStepEclipse.pic020.png)]]

Close the Welcome page. Next let us install the Eclipse UML 2 Tools. This allows to view the UML diagrams delivered with the SDK. In Eclipse navigate to ''Help > Install New Software'', lookup up and select ''UML2 Tools SDK'' as shown below:

[[Image(Sdk27.StepByStepEclipse.pic025.png)]]

Now we have to configure the JDK. Open the preferences dialog with ''Window > Preferences''. Navigate to the entry ''Java > Installed JREs''. Because the ''openMDX'' examples require a ''JDK 1.6'' we first have to add a ''JDK 1.6'' compliant ''JRE''. Click on ''Add'' and then enter ''JRE 6'' as ''JRE name'' and select the home directory of an installed ''JDK 1.6''. ''Eclipse'' automatically completes the other fields of the dialog as shown below:

[[Image(Sdk27.StepByStepEclipse.pic030.png)]]

Select the newly added ''JRE 6'' as default JDK and remove any other JDKs from the list.

[[Image(Sdk27.StepByStepEclipse.pic040.png)]]

Next open the entry ''Java > Compiler'' and set the compiler compliance level to 1.6.

[[Image(Sdk27.StepByStepEclipse.pic045.png)]]

Next we will import the ''openMDX SDK'' projects. Select ''File > Import''.

[[Image(Sdk27.StepByStepEclipse.pic050.png)]]

Select ''Existing Projects into Workspace''.

[[Image(Sdk27.StepByStepEclipse.pic060.png)]]

Navigate to the ''openMDX SDK'' installation directory and then to the project folder ''openmdx-2.7.0''. Eclipse recursively scans all directories. Deselect the projects ''openMDX/Core'', ''openMDX/Security'' and ''openMDX/Portal'' because they occur multiple times as indicated below:

[[Image(Sdk27.StepByStepEclipse.pic080.png)]]

Your package explorer view now lists the projects shown below:

[[Image(Sdk27.StepByStepEclipse.pic090.png)]]

Next we import the projects from ''openMDX/Example''. Open the import dialog with ''File > Import > Existing Projects into Workspace''. Navigate to the directory ''.\openmdxSdk-2.7.0\openmdx-example-2.7.0''. Eclipse recursively scans all directories. Select the projects as indicated below:

[[Image(Sdk27.StepByStepEclipse.pic113.png)]]

The structure of the project explorer looks as shown below. ''Eclipse'' must be able to compile all projects without errors.

[[Image(Sdk27.StepByStepEclipse.pic120.png)]]

Finally, we add the EMF (Eclipse Modeling Framework) project files to the workspace. The projects contain the following UML class diagrams:
 * ''openMDX 2 ~ Core (EMF)''
 * ''openMDX 2 ~ Security (EMF)''  
 * ''openMDX 2 ~ Portal (EMF)''
 * ''openMDX 2 Example ~ !HelloWorld (EMF)''
 * ''openMDX 2 Example ~ Workshop (EMF)''
 
Import the projects as shown in the screenshots below:

[[Image(Sdk27.StepByStepEclipse.pic121.png)]]

[[Image(Sdk27.StepByStepEclipse.pic122.png)]]

[[Image(Sdk27.StepByStepEclipse.pic123.png)]]

[[Image(Sdk27.StepByStepEclipse.pic124.png)]]

[[Image(Sdk27.StepByStepEclipse.pic125.png)]]

In order to view the class diagram of the !HelloWorld projects, expand the project ''openMDX 2 Example ~ !HelloWorld (EMF)'' and open the class diagram ''org.openmdx.example.helloworld1-Main.umlclass''.

'''NOTE''': the class diagram ''models-main.umlclass'' does not contain a valid diagram and will be removed in the next version of ''openMDX SDK''.

[[Image(Sdk27.StepByStepEclipse.pic126.png)]]

The !HelloWorld project only contains three classes:
 * The class ''!HelloWorld'' defining the operation ''sayHello()''
 * The operation's ''sayHello()'' input parameter ''!HelloWorldSayHelloParams''
 * The operation's ''sayHello()'' output parameter ''!HelloWorldSayHelloResult''

The openMDX application consists of a client and a service. The !HelloWorld client invokes the operation ''sayHello()'', the !HelloWorld service implements the operation. 

We are now ready to run the ''!Helloworld'' JUnits. Open the folder ''src/java'' in the project ''openMDX/Example !Helloworld'' and navigate to the package ''org.openmdx.example.helloworld1.program''. Right click on ''!TestHelloWorld_1'' and select ''Run As > JUnit Test''.

[[Image(Sdk27.StepByStepEclipse.pic130.png)]]

The JUnit will report errors. To fix the problem open the run dialog with ''Run > Open Run Dialog'' and select ''!TestHelloWorld_1'' in the tab ''JUnit''. Select the tab ''Classpath'' and click the button ''Advanced...''. Select the option ''Add Folders...'':

[[Image(Sdk27.StepByStepEclipse.pic131.png)]]

Navigate to the folder ''openmdx-helloworld.jar'' and select it:

[[Image(Sdk27.StepByStepEclipse.pic132.png)]]

The classpath should now look as follows:

[[Image(Sdk27.StepByStepEclipse.pic133.png)]]

Run the test again. It should now complete successfully.

[[Image(Sdk27.StepByStepEclipse.pic140.png)]]

Do the same with the JUnit ''!TestExample_1'' from the Workshop project located in the package ''org.openmdx.test.example.workshop1'' in the project ''openMDX/Example Workshop''. Do not forget to
 * Add the folder ''openmdx-workshop.jar'' to the classpath
 * Add the project ''openMDX Thirdparty HSQLDB 2'' to the classpath
 * Start the workshop database as explained in [wiki:Sdk27.StepByStepAnt openMDX SDK 2.7 for Ant Step-by-Step]

== Congratulations ==
Congratulations! You have successfully prepared ''openMDX SDK 2.7'' for ''Eclipse''.