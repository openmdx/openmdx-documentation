# openMDX SDK 2.9 for _Eclipse_ Step-by-Step Guide #

This guide explains how to setup _openMDX SDK 2.9_ for _Eclipse_.

__IMPORTANT:__ This guide assumes that the _openMDX SDK 2.9_ projects are successfully setup as described in the [openMDX SDK 2.9 for Ant Step-by-Step](./Sdk29.StepByStepAnt) and [openMDX SDK 2.9 on Tomcat + OpenEJB Step-by-Step](./Sdk29.StepByStepTomcat) guides.

Make sure that you have installed _Eclipse 3.4_ or higher (download it from [here](http://www.eclipse.org/downloads/)).

After installation launch _Eclipse_. Create a new workspace by selecting _File > Switch Workspace > Other_. Enter the directory name of the new workspace. In this guide we will use the directory _/tmp/SF/2.9/eclipse\openmdx-2.9.0_ as shown below:

[[img src=Sdk29.StepByStepEclipse.pic010.png]]

_Eclipse_ will be launched with a new empty workspace.

[[img src=Sdk29.StepByStepEclipse.pic020.png]]

Close the Welcome page. Next let us install the Eclipse UML 2 Tools. This allows to view the UML diagrams delivered with the SDK. In Eclipse navigate to _Help > Install New Software_, lookup up and select _UML2 Tools SDK_ as shown below:

[[img src=Sdk29.StepByStepEclipse.pic025.png]]

Now we have to configure the JDK. Open the preferences dialog with _Window > Preferences_. Navigate to the entry _Java > Installed JREs_. Because the _openMDX_ examples require a _JDK 1.6_ we first have to add a _JDK 1.6_ compliant _JRE_. Click on _Add_ and then enter _JRE 6_ as _JRE name_ and select the home directory of an installed _JDK 1.6_. _Eclipse_ automatically completes the other fields of the dialog as shown below:

[[img src=Sdk29.StepByStepEclipse.pic030.png]]

Select the newly added _JRE 6_ as default JDK and remove any other JDKs from the list.

[[img src=Sdk29.StepByStepEclipse.pic040.png]]

Next open the entry _Java > Compiler_ and set the compiler compliance level to 1.6.

[[img src=Sdk29.StepByStepEclipse.pic045.png]]

Next we will import the _openMDX SDK_ projects. Select _File > Import_.

[[img src=Sdk29.StepByStepEclipse.pic050.png]]

Select _Existing Projects into Workspace_.

[[img src=Sdk29.StepByStepEclipse.pic060.png]]

Navigate to the _openMDX SDK_ installation directory and then to the project folder _openmdx-2.9.0_. Eclipse recursively scans all directories. Deselect the projects _openMDX/Core_, _openMDX/Security_ and _openMDX/Portal_ because they occur multiple times as indicated below:

[[img src=Sdk29.StepByStepEclipse.pic080.png]]

Your package explorer view now lists the projects shown below:

[[img src=Sdk29.StepByStepEclipse.pic090.png]]

Next we import the projects from _openMDX/Example_. Open the import dialog with _File > Import > Existing Projects into Workspace_. Navigate to the directory _./openmdxSdk-2.9.0/openmdx-example-2.9.0_. Eclipse recursively scans all directories. Select the projects as indicated below:

[[img src=Sdk29.StepByStepEclipse.pic113.png]]

The structure of the project explorer looks as shown below. _Eclipse_ must be able to compile all projects without errors.

[[img src=Sdk29.StepByStepEclipse.pic120.png]]

Finally, we add the EMF (Eclipse Modeling Framework) project files to the workspace. The projects contain the following UML class diagrams:

* _openMDX 2 ~ Core (EMF)_
* _openMDX 2 ~ Security (EMF)_  
* _openMDX 2 ~ Portal (EMF)_
* _openMDX 2 Example ~ HelloWorld (EMF)_
* _openMDX 2 Example ~ Workshop (EMF)_
 
Import the projects as shown in the screenshots below:

[[img src=Sdk29.StepByStepEclipse.pic121.png]]

[[img src=Sdk29.StepByStepEclipse.pic122.png]]

[[img src=Sdk29.StepByStepEclipse.pic123.png]]

[[img src=Sdk29.StepByStepEclipse.pic124.png]]

[[img src=Sdk29.StepByStepEclipse.pic125.png]]

In order to view the class diagram of the HelloWorld projects, expand the project _openMDX 2 Example ~ HelloWorld (EMF)_ and open the class diagram _org.openmdx.example.helloworld1-Main.umlclass_.

__NOTE__: the class diagram _models-main.umlclass_ does not contain a valid diagram and will be removed in the next version of _openMDX SDK_.

[[img src=Sdk29.StepByStepEclipse.pic126.png]]

The HelloWorld project only contains three classes:

* The class _HelloWorld_ defining the operation _sayHello()_
* The operation's _sayHello()_ input parameter _HelloWorldSayHelloParams_
* The operation's _sayHello()_ output parameter _HelloWorldSayHelloResult_

The openMDX application consists of a client and a service. The HelloWorld client invokes the operation _sayHello()_, the HelloWorld service implements the operation. 

We are now ready to run the _Helloworld_ JUnits. Open the folder _src/java_ in the project _openMDX/Example Helloworld_ and navigate to the package _org.openmdx.example.helloworld1.program_. Right click on _TestHelloWorld_1_ and select _Run As > JUnit Test_.

[[img src=Sdk29.StepByStepEclipse.pic130.png]]

The JUnit will report errors. To fix the problem open the run dialog with _Run > Open Run Dialog_ and select _TestHelloWorld_1_ in the tab _JUnit_. Select the tab _Classpath_ and click the button _Advanced..._. Select the option _Add Folders..._:

[[img src=Sdk29.StepByStepEclipse.pic131.png]]

Navigate to the folder _openmdx-helloworld.jar_ and select it:

[[img src=Sdk29.StepByStepEclipse.pic132.png]]

The classpath should now look as follows:

[[img src=Sdk29.StepByStepEclipse.pic133.png]]

Run the test again. It should now complete successfully.

[[img src=Sdk29.StepByStepEclipse.pic140.png]]

Do the same with the JUnit _TestExample_1_ from the Workshop project located in the package _org.openmdx.test.example.workshop1_ in the project _openMDX/Example Workshop_. Do not forget to

* Add the folder _openmdx-workshop.jar_ to the classpath
* Add the project _openMDX Thirdparty HSQLDB 2_ to the classpath
* Start the workshop database as explained in [openMDX SDK 2.9 for Ant Step-by-Step](./Sdk29.StepByStepAnt)

## Congratulations ##
Congratulations! You have successfully prepared _openMDX SDK 2.9_ for _Eclipse_.